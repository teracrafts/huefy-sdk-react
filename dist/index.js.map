{"version":3,"sources":["../src/context.tsx","../src/useHuefy.ts","../src/useEmailForm.ts","../src/components.tsx","../src/index.ts"],"names":["createContext","useRef","useMemo","HuefyClient","useContext","jsx","useState","useEffect","useCallback","error","jsxs","Fragment"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Huefy React Context\n * Provides Huefy client instance throughout the React component tree\n */\n\nimport React, { createContext, useContext, useMemo, useRef } from 'react';\nimport { HuefyClient } from '@teracrafts/huefy';\nimport type { HuefyContextValue, HuefyProviderConfig } from './types.js';\n\n/**\n * React Context for Huefy client\n */\nconst HuefyContext = createContext<HuefyContextValue | null>(null);\n\n/**\n * Props for the HuefyProvider component\n */\nexport interface HuefyProviderProps {\n  /** Huefy configuration */\n  config: HuefyProviderConfig;\n  /** Child components */\n  children: React.ReactNode;\n}\n\n/**\n * Huefy Provider component\n * \n * Provides Huefy client instance to all child components via React Context.\n * \n * @example\n * ```tsx\n * import { HuefyProvider } from '@huefy/react';\n * \n * function App() {\n *   return (\n *     <HuefyProvider config={{ apiKey: 'your-api-key' }}>\n *       <EmailForm />\n *     </HuefyProvider>\n *   );\n * }\n * ```\n */\nexport function HuefyProvider({ config, children }: HuefyProviderProps) {\n  // Use ref to ensure client is only created once\n  const clientRef = useRef<HuefyClient | null>(null);\n\n  // Create client instance with memoization\n  const contextValue = useMemo<HuefyContextValue>(() => {\n    // Create client if it doesn't exist or config changed\n    if (!clientRef.current) {\n      if (config.debug) {\n        console.log('[Huefy] Creating new client with config:', {\n          baseUrl: config.baseUrl,\n          timeout: config.timeout,\n          retryAttempts: config.retryAttempts,\n        });\n      }\n\n      clientRef.current = new HuefyClient(config, {\n        onSendStart: config.debug ? (request) => {\n          console.log('[Huefy] Starting email send:', request.template_key);\n        } : undefined,\n        onSendSuccess: config.debug ? (response) => {\n          console.log('[Huefy] Email sent successfully:', response.message_id);\n        } : undefined,\n        onSendError: config.debug ? (error) => {\n          console.error('[Huefy] Email send failed:', error.message);\n        } : undefined,\n        onRetry: config.debug ? (attempt, error) => {\n          console.log(`[Huefy] Retry attempt ${attempt}:`, error.message);\n        } : undefined,\n      });\n    }\n\n    return {\n      client: clientRef.current,\n      isReady: true,\n      config,\n    };\n  }, [config]);\n\n  return (\n    <HuefyContext.Provider value={contextValue}>\n      {children}\n    </HuefyContext.Provider>\n  );\n}\n\n/**\n * Hook to access the Huefy context\n * \n * @returns Huefy context value\n * @throws Error if used outside of HuefyProvider\n * \n * @example\n * ```tsx\n * function MyComponent() {\n *   const { client, isReady } = useHuefyContext();\n *   \n *   if (!isReady) {\n *     return <div>Loading...</div>;\n *   }\n *   \n *   // Use client...\n * }\n * ```\n */\nexport function useHuefyContext(): HuefyContextValue {\n  const context = useContext(HuefyContext);\n  \n  if (!context) {\n    throw new Error(\n      'useHuefyContext must be used within a HuefyProvider. ' +\n      'Please wrap your component tree with <HuefyProvider>.'\n    );\n  }\n\n  return context;\n}\n\n/**\n * HOC to inject Huefy client as props\n * \n * @param Component - Component to wrap\n * @returns Wrapped component with Huefy client props\n * \n * @example\n * ```tsx\n * interface Props {\n *   huefyClient: HuefyClient;\n *   huefyConfig: HuefyProviderConfig;\n * }\n * \n * const MyComponent = withHuefy<Props>(({ huefyClient }) => {\n *   // Use huefyClient...\n * });\n * ```\n */\nexport function withHuefy<P extends object>(\n  Component: React.ComponentType<P & {\n    huefyClient: HuefyClient;\n    huefyConfig: HuefyProviderConfig;\n  }>\n) {\n  const WrappedComponent = (props: P) => {\n    const { client, config } = useHuefyContext();\n    \n    return (\n      <Component \n        {...props} \n        huefyClient={client} \n        huefyConfig={config}\n      />\n    );\n  };\n\n  WrappedComponent.displayName = `withHuefy(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n}","/**\n * useHuefy Hook\n * Main React hook for sending emails with Huefy\n */\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport type { HuefyError, EmailData, SendEmailOptions, SendEmailResponse } from '@teracrafts/huefy';\nimport { useHuefyContext } from './context.js';\nimport type { UseHuefyOptions, UseHuefyResult, EmailSendState } from './types.js';\n\n/**\n * Initial state for email sending operations\n */\nconst initialState: EmailSendState = {\n  loading: false,\n  error: null,\n  data: null,\n  success: false,\n};\n\n/**\n * Main hook for sending emails with Huefy\n * \n * Provides a simple interface for sending emails with automatic state management,\n * loading states, error handling, and success callbacks.\n * \n * @param options - Configuration options for the hook\n * @returns Hook result with send functions and state\n * \n * @example\n * ```tsx\n * function EmailButton() {\n *   const { sendEmail, loading, error, success } = useHuefy({\n *     onSuccess: (response) => {\n *       toast.success(`Email sent: ${response.messageId}`);\n *     },\n *     onError: (error) => {\n *       toast.error(`Failed to send email: ${error.message}`);\n *     }\n *   });\n * \n *   const handleSend = async () => {\n *     try {\n *       await sendEmail('welcome-email', {\n *         name: 'John Doe',\n *         company: 'Acme Corp'\n *       }, 'john@example.com');\n *     } catch (error) {\n *       // Error is already handled by onError callback\n *     }\n *   };\n * \n *   return (\n *     <button onClick={handleSend} disabled={loading}>\n *       {loading ? 'Sending...' : 'Send Email'}\n *     </button>\n *   );\n * }\n * ```\n */\nexport function useHuefy(options: UseHuefyOptions = {}): UseHuefyResult {\n  const { client } = useHuefyContext();\n  const [state, setState] = useState<EmailSendState>(initialState);\n  const optionsRef = useRef(options);\n  const autoResetTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Update options ref when options change\n  optionsRef.current = options;\n\n  // Clear auto-reset timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (autoResetTimeoutRef.current) {\n        clearTimeout(autoResetTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  /**\n   * Reset the current state\n   */\n  const reset = useCallback(() => {\n    setState(initialState);\n    if (autoResetTimeoutRef.current) {\n      clearTimeout(autoResetTimeoutRef.current);\n      autoResetTimeoutRef.current = null;\n    }\n  }, []);\n\n  /**\n   * Set up auto-reset if configured\n   */\n  const setupAutoReset = useCallback(() => {\n    const { autoResetDelay } = optionsRef.current;\n    if (autoResetDelay && autoResetDelay > 0) {\n      autoResetTimeoutRef.current = setTimeout(() => {\n        reset();\n      }, autoResetDelay);\n    }\n  }, [reset]);\n\n  /**\n   * Send an email using a template\n   */\n  const sendEmail = useCallback(async (\n    templateKey: string,\n    data: EmailData,\n    recipient: string,\n    emailOptions?: SendEmailOptions,\n  ): Promise<SendEmailResponse> => {\n    const currentOptions = optionsRef.current;\n\n    // Set loading state and call onSending callback\n    setState(prev => ({ ...prev, loading: true, error: null, success: false }));\n    currentOptions.onSending?.();\n\n    try {\n      // Send the email\n      const response = await client.sendEmail(templateKey, data, recipient, emailOptions);\n\n      // Update state with success\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        data: response,\n        success: true,\n        error: null,\n      }));\n\n      // Call success callback\n      currentOptions.onSuccess?.(response);\n\n      // Set up auto-reset or manual reset\n      if (currentOptions.resetOnSuccess !== false) {\n        if (currentOptions.autoResetDelay) {\n          setupAutoReset();\n        } else {\n          // Reset immediately if no delay specified\n          setState(initialState);\n        }\n      }\n\n      return response;\n    } catch (error) {\n      const huefyError = error as HuefyError;\n\n      // Update state with error\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: huefyError,\n        success: false,\n      }));\n\n      // Call error callback\n      currentOptions.onError?.(huefyError);\n\n      // Reset on error if configured\n      if (currentOptions.resetOnError) {\n        if (currentOptions.autoResetDelay) {\n          setupAutoReset();\n        } else {\n          setState(initialState);\n        }\n      }\n\n      throw huefyError;\n    }\n  }, [client, setupAutoReset]);\n\n  /**\n   * Send multiple emails in bulk\n   */\n  const sendBulkEmails = useCallback(async (\n    emails: Array<{\n      templateKey: string;\n      data: EmailData;\n      recipient: string;\n      options?: SendEmailOptions;\n    }>,\n  ) => {\n    const currentOptions = optionsRef.current;\n\n    // Set loading state\n    setState(prev => ({ ...prev, loading: true, error: null, success: false }));\n    currentOptions.onSending?.();\n\n    try {\n      // Send bulk emails\n      const results = await client.sendBulkEmails(emails);\n\n      // Update state with results\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        success: true,\n        error: null,\n      }));\n\n      // Call success callback for successful sends\n      const successfulResults = results.filter(r => r.success && r.result);\n      successfulResults.forEach(result => {\n        if (result.result) {\n          currentOptions.onSuccess?.(result.result);\n        }\n      });\n\n      // Call error callback for failed sends\n      const failedResults = results.filter(r => !r.success && r.error);\n      failedResults.forEach(result => {\n        if (result.error) {\n          currentOptions.onError?.(result.error);\n        }\n      });\n\n      // Reset if configured\n      if (currentOptions.resetOnSuccess !== false) {\n        if (currentOptions.autoResetDelay) {\n          setupAutoReset();\n        } else {\n          setState(initialState);\n        }\n      }\n\n      return results;\n    } catch (error) {\n      const huefyError = error as HuefyError;\n\n      // Update state with error\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: huefyError,\n        success: false,\n      }));\n\n      // Call error callback\n      currentOptions.onError?.(huefyError);\n\n      // Reset on error if configured\n      if (currentOptions.resetOnError) {\n        if (currentOptions.autoResetDelay) {\n          setupAutoReset();\n        } else {\n          setState(initialState);\n        }\n      }\n\n      throw huefyError;\n    }\n  }, [client, setupAutoReset]);\n\n  /**\n   * Check API health\n   */\n  const healthCheck = useCallback(async () => {\n    return client.healthCheck();\n  }, [client]);\n\n  return {\n    ...state,\n    sendEmail,\n    sendBulkEmails,\n    reset,\n    healthCheck,\n  };\n}","/**\n * useEmailForm Hook\n * Specialized hook for form-based email sending with validation\n */\n\nimport { useState, useCallback, useMemo } from 'react';\nimport type { EmailData, SendEmailOptions } from '@teracrafts/huefy';\nimport { useHuefy } from './useHuefy.js';\nimport type { \n  UseEmailFormOptions, \n  UseEmailFormResult, \n  EmailFormData \n} from './types.js';\n\n/**\n * Default validation function\n */\nconst defaultValidate = (formData: EmailFormData): string[] | null => {\n  const errors: string[] = [];\n\n  if (!formData.templateKey?.trim()) {\n    errors.push('Template key is required');\n  }\n\n  if (!formData.recipient?.trim()) {\n    errors.push('Recipient email is required');\n  } else {\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(formData.recipient)) {\n      errors.push('Invalid email address');\n    }\n  }\n\n  if (!formData.data || Object.keys(formData.data).length === 0) {\n    errors.push('Template data is required');\n  }\n\n  return errors.length > 0 ? errors : null;\n};\n\n/**\n * Hook for form-based email sending with validation\n * \n * Provides form state management, validation, and email sending functionality\n * in a single hook. Perfect for building email forms.\n * \n * @param options - Configuration options for the hook\n * @returns Hook result with form state and actions\n * \n * @example\n * ```tsx\n * function EmailForm() {\n *   const {\n *     formData,\n *     setFormData,\n *     setTemplateData,\n *     sendEmail,\n *     loading,\n *     error,\n *     success,\n *     validationErrors,\n *     isValid,\n *     reset\n *   } = useEmailForm({\n *     defaultTemplate: 'welcome-email',\n *     defaultData: { company: 'Acme Corp' },\n *     onSuccess: (response) => {\n *       toast.success('Email sent successfully!');\n *     }\n *   });\n * \n *   return (\n *     <form onSubmit={(e) => {\n *       e.preventDefault();\n *       if (isValid) {\n *         sendEmail();\n *       }\n *     }}>\n *       <input\n *         type=\"email\"\n *         value={formData.recipient}\n *         onChange={(e) => setFormData({ recipient: e.target.value })}\n *         placeholder=\"Recipient email\"\n *       />\n *       \n *       <input\n *         value={formData.data.name || ''}\n *         onChange={(e) => setTemplateData({ name: e.target.value })}\n *         placeholder=\"Name\"\n *       />\n * \n *       {validationErrors.length > 0 && (\n *         <div className=\"errors\">\n *           {validationErrors.map(error => (\n *             <div key={error}>{error}</div>\n *           ))}\n *         </div>\n *       )}\n * \n *       <button type=\"submit\" disabled={!isValid || loading}>\n *         {loading ? 'Sending...' : 'Send Email'}\n *       </button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useEmailForm(options: UseEmailFormOptions = {}): UseEmailFormResult {\n  const {\n    defaultTemplate = '',\n    defaultData = {},\n    defaultRecipient = '',\n    defaultProvider,\n    validate = defaultValidate,\n    ...huefyOptions\n  } = options;\n\n  // Initialize form data\n  const [formData, setFormDataState] = useState<EmailFormData>(() => ({\n    templateKey: defaultTemplate,\n    data: { ...defaultData },\n    recipient: defaultRecipient,\n    provider: defaultProvider,\n  }));\n\n  // Use the main Huefy hook for email sending\n  const huefyResult = useHuefy(huefyOptions);\n\n  /**\n   * Update form data partially\n   */\n  const setFormData = useCallback((updates: Partial<EmailFormData>) => {\n    setFormDataState(prev => ({\n      ...prev,\n      ...updates,\n      // Merge data objects if both exist\n      ...(updates.data && prev.data ? {\n        data: { ...prev.data, ...updates.data }\n      } : updates.data ? { data: updates.data } : {}),\n    }));\n  }, []);\n\n  /**\n   * Update only template data\n   */\n  const setTemplateData = useCallback((data: EmailData) => {\n    setFormDataState(prev => ({\n      ...prev,\n      data: { ...prev.data, ...data },\n    }));\n  }, []);\n\n  /**\n   * Validate current form data\n   */\n  const validationErrors = useMemo(() => {\n    return validate(formData) || [];\n  }, [formData, validate]);\n\n  /**\n   * Check if form is valid\n   */\n  const isValid = useMemo(() => {\n    return validationErrors.length === 0;\n  }, [validationErrors]);\n\n  /**\n   * Send email with current form data\n   */\n  const sendEmail = useCallback(async () => {\n    if (!isValid) {\n      throw new Error('Form validation failed');\n    }\n\n    const emailOptions: SendEmailOptions = {};\n    if (formData.provider) {\n      emailOptions.provider = formData.provider;\n    }\n\n    return huefyResult.sendEmail(\n      formData.templateKey,\n      formData.data,\n      formData.recipient,\n      emailOptions,\n    );\n  }, [formData, isValid, huefyResult.sendEmail]);\n\n  /**\n   * Reset form and state\n   */\n  const reset = useCallback(() => {\n    setFormDataState({\n      templateKey: defaultTemplate,\n      data: { ...defaultData },\n      recipient: defaultRecipient,\n      provider: defaultProvider,\n    });\n    huefyResult.reset();\n  }, [defaultTemplate, defaultData, defaultRecipient, defaultProvider, huefyResult.reset]);\n\n  return {\n    // Form state\n    formData,\n    setFormData,\n    setTemplateData,\n    validationErrors,\n    isValid,\n    \n    // Email sending state from useHuefy\n    loading: huefyResult.loading,\n    error: huefyResult.error,\n    data: huefyResult.data,\n    success: huefyResult.success,\n    \n    // Actions\n    sendEmail,\n    reset,\n  };\n}","/**\n * Huefy React Components\n * Ready-to-use React components for common email sending scenarios\n */\n\nimport React, { useState } from 'react';\nimport { useHuefy } from './useHuefy.js';\nimport { useEmailForm } from './useEmailForm.js';\nimport type { \n  SendEmailButtonProps,\n  EmailFormProps,\n} from './types.js';\n\n/**\n * Button component for sending emails\n * \n * A simple button that sends an email when clicked. Handles loading states\n * and provides callbacks for success and error handling.\n * \n * @example\n * ```tsx\n * <SendEmailButton\n *   templateKey=\"welcome-email\"\n *   data={{ name: 'John Doe', company: 'Acme Corp' }}\n *   recipient=\"john@example.com\"\n *   onSuccess={(response) => toast.success('Email sent!')}\n *   onError={(error) => toast.error(error.message)}\n * >\n *   Send Welcome Email\n * </SendEmailButton>\n * ```\n */\nexport function SendEmailButton({\n  templateKey,\n  data,\n  recipient,\n  provider,\n  children = 'Send Email',\n  loadingText = 'Sending...',\n  onSuccess,\n  onError,\n  disabled = false,\n  className = '',\n  style,\n  type = 'button',\n}: SendEmailButtonProps) {\n  const { sendEmail, loading } = useHuefy({\n    onSuccess,\n    onError,\n  });\n\n  const handleClick = async () => {\n    try {\n      await sendEmail(templateKey, data, recipient, provider ? { provider } : undefined);\n    } catch (error) {\n      // Error is handled by the onError callback in useHuefy\n    }\n  };\n\n  return (\n    <button\n      type={type}\n      onClick={handleClick}\n      disabled={disabled || loading}\n      className={className}\n      style={style}\n    >\n      {loading ? loadingText : children}\n    </button>\n  );\n}\n\n/**\n * Complete email form component\n * \n * A form component that handles email template data input, recipient selection,\n * validation, and sending. Provides a complete email sending interface.\n * \n * @example\n * ```tsx\n * <EmailForm\n *   templateKey=\"contact-form\"\n *   initialData={{ subject: 'Contact Form Submission' }}\n *   onSuccess={(response) => {\n *     toast.success('Message sent successfully!');\n *     router.push('/thank-you');\n *   }}\n *   onError={(error) => {\n *     toast.error(`Failed to send: ${error.message}`);\n *   }}\n *   showMessages={true}\n * />\n * ```\n */\nexport function EmailForm({\n  templateKey,\n  initialData = {},\n  initialRecipient = '',\n  provider,\n  onSuccess,\n  onError,\n  onSending,\n  validate,\n  className = '',\n  showLoading = true,\n  showMessages = true,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  successComponent: SuccessComponent,\n}: EmailFormProps) {\n  const {\n    formData,\n    setFormData,\n    setTemplateData,\n    sendEmail,\n    loading,\n    error,\n    success,\n    data,\n    validationErrors,\n    isValid,\n    reset,\n  } = useEmailForm({\n    defaultTemplate: templateKey,\n    defaultData: initialData,\n    defaultRecipient: initialRecipient,\n    defaultProvider: provider,\n    validate,\n    onSuccess,\n    onError,\n    onSending,\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isValid && !loading) {\n      try {\n        await sendEmail();\n      } catch (error) {\n        // Error is handled by the onError callback\n      }\n    }\n  };\n\n  const handleRecipientChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({ recipient: e.target.value });\n  };\n\n  const handleDataChange = (key: string, value: string) => {\n    setTemplateData({ [key]: value });\n  };\n\n  // Show success message if configured\n  if (success && showMessages) {\n    if (SuccessComponent && data) {\n      return <SuccessComponent response={data} />;\n    }\n    return (\n      <div className=\"huefy-success\" style={{ color: 'green', padding: '16px' }}>\n        ✅ Email sent successfully! Message ID: {data?.messageId}\n        <button \n          onClick={reset}\n          style={{ marginLeft: '16px', padding: '4px 8px' }}\n        >\n          Send Another\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className={`huefy-form ${className}`}>\n      {/* Recipient Input */}\n      <div className=\"huefy-field\" style={{ marginBottom: '16px' }}>\n        <label htmlFor=\"recipient\" style={{ display: 'block', marginBottom: '4px' }}>\n          Recipient Email *\n        </label>\n        <input\n          id=\"recipient\"\n          type=\"email\"\n          value={formData.recipient}\n          onChange={handleRecipientChange}\n          placeholder=\"Enter recipient email\"\n          required\n          style={{\n            width: '100%',\n            padding: '8px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n          }}\n        />\n      </div>\n\n      {/* Dynamic Template Data Fields */}\n      <div className=\"huefy-template-data\">\n        <h4 style={{ marginBottom: '8px' }}>Template Data</h4>\n        {Object.entries(formData.data).map(([key, value]) => (\n          <div key={key} className=\"huefy-field\" style={{ marginBottom: '12px' }}>\n            <label htmlFor={key} style={{ display: 'block', marginBottom: '4px' }}>\n              {key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')}\n            </label>\n            <input\n              id={key}\n              type=\"text\"\n              value={value}\n              onChange={(e) => handleDataChange(key, e.target.value)}\n              placeholder={`Enter ${key}`}\n              style={{\n                width: '100%',\n                padding: '8px',\n                border: '1px solid #ccc',\n                borderRadius: '4px',\n              }}\n            />\n          </div>\n        ))}\n        \n        {/* Add new field button */}\n        <AddFieldButton\n          onAdd={(key) => setTemplateData({ [key]: '' })}\n          existingKeys={Object.keys(formData.data)}\n        />\n      </div>\n\n      {/* Validation Errors */}\n      {validationErrors.length > 0 && (\n        <div className=\"huefy-errors\" style={{ \n          color: 'red', \n          marginBottom: '16px',\n          padding: '8px',\n          border: '1px solid red',\n          borderRadius: '4px',\n          backgroundColor: '#fee',\n        }}>\n          <strong>Please fix the following errors:</strong>\n          <ul style={{ margin: '4px 0 0 20px' }}>\n            {validationErrors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* API Error */}\n      {error && showMessages && (\n        <div className=\"huefy-error\" style={{ \n          color: 'red', \n          marginBottom: '16px',\n          padding: '8px',\n          border: '1px solid red',\n          borderRadius: '4px',\n          backgroundColor: '#fee',\n        }}>\n          {ErrorComponent ? (\n            <ErrorComponent error={error} />\n          ) : (\n            <>\n              <strong>Error:</strong> {error.message}\n              {error.code && <div><small>Code: {error.code}</small></div>}\n            </>\n          )}\n        </div>\n      )}\n\n      {/* Loading State */}\n      {loading && showLoading && (\n        <div className=\"huefy-loading\" style={{ \n          marginBottom: '16px',\n          padding: '8px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          backgroundColor: '#f9f9f9',\n        }}>\n          {LoadingComponent ? (\n            <LoadingComponent />\n          ) : (\n            '📧 Sending email...'\n          )}\n        </div>\n      )}\n\n      {/* Submit Button */}\n      <div className=\"huefy-actions\">\n        <button\n          type=\"submit\"\n          disabled={!isValid || loading}\n          style={{\n            padding: '12px 24px',\n            backgroundColor: isValid && !loading ? '#007bff' : '#ccc',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: isValid && !loading ? 'pointer' : 'not-allowed',\n            marginRight: '8px',\n          }}\n        >\n          {loading ? 'Sending...' : 'Send Email'}\n        </button>\n        \n        <button\n          type=\"button\"\n          onClick={reset}\n          disabled={loading}\n          style={{\n            padding: '12px 24px',\n            backgroundColor: 'transparent',\n            color: '#6c757d',\n            border: '1px solid #6c757d',\n            borderRadius: '4px',\n            cursor: loading ? 'not-allowed' : 'pointer',\n          }}\n        >\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n}\n\n/**\n * Component for adding new template data fields\n */\nfunction AddFieldButton({ \n  onAdd, \n  existingKeys \n}: { \n  onAdd: (key: string) => void; \n  existingKeys: string[];\n}) {\n  const [newKey, setNewKey] = useState('');\n  const [showInput, setShowInput] = useState(false);\n\n  const handleAdd = () => {\n    if (newKey.trim() && !existingKeys.includes(newKey.trim())) {\n      onAdd(newKey.trim());\n      setNewKey('');\n      setShowInput(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setNewKey('');\n    setShowInput(false);\n  };\n\n  if (!showInput) {\n    return (\n      <button\n        type=\"button\"\n        onClick={() => setShowInput(true)}\n        style={{\n          padding: '6px 12px',\n          backgroundColor: 'transparent',\n          color: '#007bff',\n          border: '1px dashed #007bff',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          fontSize: '14px',\n        }}\n      >\n        + Add Field\n      </button>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n      <input\n        type=\"text\"\n        value={newKey}\n        onChange={(e) => setNewKey(e.target.value)}\n        placeholder=\"Field name\"\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            handleAdd();\n          } else if (e.key === 'Escape') {\n            handleCancel();\n          }\n        }}\n        style={{\n          padding: '4px 8px',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          fontSize: '14px',\n        }}\n        autoFocus\n      />\n      <button\n        type=\"button\"\n        onClick={handleAdd}\n        disabled={!newKey.trim() || existingKeys.includes(newKey.trim())}\n        style={{\n          padding: '4px 8px',\n          backgroundColor: '#28a745',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          fontSize: '12px',\n        }}\n      >\n        Add\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleCancel}\n        style={{\n          padding: '4px 8px',\n          backgroundColor: '#6c757d',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          fontSize: '12px',\n        }}\n      >\n        Cancel\n      </button>\n    </div>\n  );\n}","/**\n * Huefy React SDK\n * \n * React hooks and components for the Huefy email sending platform\n * \n * @packageDocumentation\n */\n\n// Export main components and provider\nexport { HuefyProvider, useHuefyContext, withHuefy } from './context.js';\nexport type { HuefyProviderProps } from './context.js';\n\n// Export hooks\nexport { useHuefy } from './useHuefy.js';\nexport { useEmailForm } from './useEmailForm.js';\n\n// Export components\nexport { SendEmailButton, EmailForm } from './components.js';\n\n// Export all types\nexport type {\n  HuefyProviderConfig,\n  EmailSendState,\n  UseHuefyOptions,\n  UseHuefyResult,\n  UseEmailFormOptions,\n  UseEmailFormResult,\n  EmailFormData,\n  HuefyContextValue,\n  EmailFormProps,\n  SendEmailButtonProps,\n  BulkEmailState,\n} from './types.js';\n\n// Re-export useful types from the base SDK\nexport type {\n  HuefyConfig,\n  EmailProvider,\n  EmailData,\n  SendEmailOptions,\n  SendEmailRequest,\n  SendEmailResponse,\n  ErrorResponse,\n  ValidationError as SDKValidationError,\n  HealthResponse,\n  HuefyResult,\n  HuefyError as HuefyErrorType,\n  HuefyResponse,\n  RetryConfig,\n  HttpResponse,\n  HuefyEventCallbacks,\n} from '@teracrafts/huefy';\n\n// Re-export error classes from the base SDK\nexport {\n  HuefyError,\n  AuthenticationError,\n  TemplateNotFoundError,\n  InvalidTemplateDataError,\n  InvalidRecipientError,\n  ProviderError,\n  RateLimitError,\n  NetworkError,\n  TimeoutError,\n  ValidationError,\n  ErrorCode,\n  createErrorFromResponse,\n  isHuefyError,\n  isErrorCode,\n  isRetryableError,\n} from '@teracrafts/huefy';\n\n/**\n * Package version\n */\nexport const VERSION = '1.0.0-beta.9';\n\n/**\n * Package information\n */\nexport const SDK_INFO = {\n  name: '@teracrafts/huefy-react',\n  version: VERSION,\n  language: 'React/TypeScript',\n  baseSDK: '@teracrafts/huefy',\n  repository: 'https://github.com/teracrafts/huefy-sdk',\n  documentation: 'https://docs.huefy.com/sdk/react',\n} as const;"]}