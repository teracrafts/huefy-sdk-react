{"version":3,"sources":["../src/errors.ts","../src/http.ts","../src/client.ts","../src/types.ts","../src/index.ts"],"names":["ErrorCode"],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Huefy SDK Error Classes\n * Custom error types for better error handling and debugging\n */\n\nimport type { ErrorResponse, ErrorCode } from './types.js';\n\n/**\n * Base error class for all Huefy SDK errors\n */\nexport class HuefyError extends Error {\n  public readonly code: string;\n  public readonly statusCode?: number;\n  public readonly details?: any;\n  public readonly isHuefyError = true;\n\n  constructor(\n    message: string,\n    code: string = 'UNKNOWN_ERROR',\n    statusCode?: number,\n    details?: any,\n  ) {\n    super(message);\n    this.name = 'HuefyError';\n    this.code = code;\n    this.statusCode = statusCode;\n    this.details = details;\n\n    // Maintains proper stack trace for where error was thrown (Node.js only)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, HuefyError);\n    }\n  }\n\n  /**\n   * Create HuefyError from API error response\n   */\n  static fromErrorResponse(\n    response: ErrorResponse,\n    statusCode?: number,\n  ): HuefyError {\n    return new HuefyError(response.error, response.code, statusCode, response.details);\n  }\n\n  /**\n   * Convert error to JSON representation\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      statusCode: this.statusCode,\n      details: this.details,\n    };\n  }\n}\n\n/**\n * Error thrown when API key is invalid or missing\n */\nexport class AuthenticationError extends HuefyError {\n  constructor(message: string = 'Invalid or missing API key', details?: any) {\n    super(message, 'INVALID_API_KEY', 401, details);\n    this.name = 'AuthenticationError';\n  }\n}\n\n/**\n * Error thrown when template is not found\n */\nexport class TemplateNotFoundError extends HuefyError {\n  constructor(templateKey: string, details?: any) {\n    super(`Template '${templateKey}' not found`, 'TEMPLATE_NOT_FOUND', 404, {\n      templateKey: templateKey,\n      ...details,\n    });\n    this.name = 'TemplateNotFoundError';\n  }\n}\n\n/**\n * Error thrown when template data is invalid\n */\nexport class InvalidTemplateDataError extends HuefyError {\n  constructor(message: string = 'Invalid template data', details?: any) {\n    super(message, 'INVALID_TEMPLATE_DATA', 400, details);\n    this.name = 'InvalidTemplateDataError';\n  }\n}\n\n/**\n * Error thrown when recipient email is invalid\n */\nexport class InvalidRecipientError extends HuefyError {\n  constructor(recipient: string, details?: any) {\n    super(`Invalid recipient email: ${recipient}`, 'INVALID_RECIPIENT', 400, {\n      recipient,\n      ...details,\n    });\n    this.name = 'InvalidRecipientError';\n  }\n}\n\n/**\n * Error thrown when email provider fails\n */\nexport class ProviderError extends HuefyError {\n  constructor(message: string = 'Email provider error', details?: any) {\n    super(message, 'PROVIDER_ERROR', 500, details);\n    this.name = 'ProviderError';\n  }\n}\n\n/**\n * Error thrown when rate limit is exceeded\n */\nexport class RateLimitError extends HuefyError {\n  constructor(message: string = 'Rate limit exceeded', details?: any) {\n    super(message, 'RATE_LIMIT_EXCEEDED', 429, details);\n    this.name = 'RateLimitError';\n  }\n}\n\n/**\n * Error thrown for network-related issues\n */\nexport class NetworkError extends HuefyError {\n  constructor(message: string = 'Network error', cause?: Error) {\n    super(message, 'NETWORK_ERROR', undefined, { cause: cause?.message });\n    this.name = 'NetworkError';\n  }\n}\n\n/**\n * Error thrown when request times out\n */\nexport class TimeoutError extends HuefyError {\n  constructor(timeout: number) {\n    super(`Request timed out after ${timeout}ms`, 'TIMEOUT_ERROR', undefined, { timeout });\n    this.name = 'TimeoutError';\n  }\n}\n\n/**\n * Error thrown for validation failures\n */\nexport class ValidationError extends HuefyError {\n  constructor(message: string = 'Validation error', details?: any) {\n    super(message, 'VALIDATION_ERROR', 400, details);\n    this.name = 'ValidationError';\n  }\n}\n\n/**\n * Factory function to create appropriate error from HTTP response\n */\nexport function createErrorFromResponse(\n  data: ErrorResponse,\n  statusCode: number,\n): HuefyError {\n  switch (data.code) {\n    case 'INVALID_API_KEY':\n      return new AuthenticationError(data.error, data.details);\n    \n    case 'TEMPLATE_NOT_FOUND':\n      return new TemplateNotFoundError(\n        data.details?.templateKey || data.details?.template_key || 'unknown',\n        data.details,\n      );\n    \n    case 'INVALID_TEMPLATE_DATA':\n      return new InvalidTemplateDataError(data.error, data.details);\n    \n    case 'INVALID_RECIPIENT':\n      return new InvalidRecipientError(\n        data.details?.recipient || 'unknown',\n        data.details,\n      );\n    \n    case 'PROVIDER_ERROR':\n      return new ProviderError(data.error, data.details);\n    \n    case 'RATE_LIMIT_EXCEEDED':\n      return new RateLimitError(data.error, data.details);\n    \n    default:\n      return new HuefyError(data.error, data.code, statusCode, data.details);\n  }\n}\n\n/**\n * Type guard to check if error is a HuefyError\n */\nexport function isHuefyError(error: any): error is HuefyError {\n  return error && typeof error === 'object' && error.isHuefyError === true;\n}\n\n/**\n * Type guard to check if error is a specific Huefy error type\n */\nexport function isErrorCode(error: any, code: string): boolean {\n  return isHuefyError(error) && error.code === code;\n}\n\n/**\n * Type guard to check if error is retryable\n */\nexport function isRetryableError(error: any): boolean {\n  if (!isHuefyError(error)) {\n    return false;\n  }\n\n  // Retry on network errors, timeouts, and 5xx server errors\n  if (error instanceof NetworkError || error instanceof TimeoutError) {\n    return true;\n  }\n\n  if (error.statusCode && error.statusCode >= 500) {\n    return true;\n  }\n\n  // Don't retry on 4xx client errors (except 429 rate limit)\n  if (error.statusCode && error.statusCode >= 400 && error.statusCode < 500) {\n    return error.statusCode === 429; // Retry on rate limit\n  }\n\n  return false;\n}","/**\n * HTTP Client for Huefy SDK\n * Handles all HTTP communication with the Huefy API\n */\n\nimport fetch from 'cross-fetch';\nimport type {\n  HuefyConfig,\n  HttpResponse,\n  RetryConfig,\n  ErrorResponse,\n} from './types.js';\nimport {\n  HuefyError,\n  NetworkError,\n  TimeoutError,\n  createErrorFromResponse,\n  isRetryableError,\n} from './errors.js';\n\n/**\n * Default retry configuration\n */\nconst DEFAULT_RETRY_CONFIG: RetryConfig = {\n  maxAttempts: 3,\n  initialDelay: 1000,\n  backoffMultiplier: 2,\n  maxDelay: 10000,\n  retryableStatusCodes: [429, 500, 502, 503, 504],\n};\n\n/**\n * HTTP client for making requests to the Huefy API\n */\nexport class HttpClient {\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly timeout: number;\n  private readonly retryConfig: RetryConfig;\n\n  constructor(config: HuefyConfig) {\n    this.apiKey = config.apiKey;\n    this.baseUrl = config.baseUrl || 'https://api.huefy.com/api/v1/sdk';\n    this.timeout = config.timeout || 30000;\n    this.retryConfig = {\n      ...DEFAULT_RETRY_CONFIG,\n      maxAttempts: config.retryAttempts || DEFAULT_RETRY_CONFIG.maxAttempts,\n      initialDelay: config.retryDelay || DEFAULT_RETRY_CONFIG.initialDelay,\n    };\n\n    // Validate configuration\n    if (!this.apiKey || typeof this.apiKey !== 'string') {\n      throw new HuefyError('API key is required and must be a string', 'INVALID_CONFIG');\n    }\n\n    if (this.timeout < 0) {\n      throw new HuefyError('Timeout must be a positive number', 'INVALID_CONFIG');\n    }\n  }\n\n  /**\n   * Make a POST request to the API\n   */\n  async post<T = any>(\n    endpoint: string,\n    data: any,\n    options: { timeout?: number } = {},\n  ): Promise<HttpResponse<T>> {\n    return this.request('POST', endpoint, data, options);\n  }\n\n  /**\n   * Make a GET request to the API\n   */\n  async get<T = any>(\n    endpoint: string,\n    options: { timeout?: number } = {},\n  ): Promise<HttpResponse<T>> {\n    return this.request('GET', endpoint, undefined, options);\n  }\n\n  /**\n   * Make an HTTP request with retry logic\n   */\n  private async request<T = any>(\n    method: 'GET' | 'POST',\n    endpoint: string,\n    data?: any,\n    options: { timeout?: number } = {},\n  ): Promise<HttpResponse<T>> {\n    const url = `${this.baseUrl}${endpoint}`;\n    const timeout = options.timeout || this.timeout;\n    \n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= this.retryConfig.maxAttempts; attempt++) {\n      try {\n        const response = await this.makeRequest<T>(method, url, data, timeout);\n        return response;\n      } catch (error) {\n        lastError = error as Error;\n\n        // Don't retry on the last attempt\n        if (attempt === this.retryConfig.maxAttempts) {\n          break;\n        }\n\n        // Only retry if the error is retryable\n        if (!isRetryableError(error)) {\n          break;\n        }\n\n        // Calculate delay with exponential backoff\n        const delay = Math.min(\n          this.retryConfig.initialDelay * Math.pow(this.retryConfig.backoffMultiplier, attempt - 1),\n          this.retryConfig.maxDelay,\n        );\n\n        // Wait before retrying\n        await this.sleep(delay);\n      }\n    }\n\n    // If we get here, all retries failed\n    throw lastError;\n  }\n\n  /**\n   * Make a single HTTP request\n   */\n  private async makeRequest<T = any>(\n    method: 'GET' | 'POST',\n    url: string,\n    data?: any,\n    timeout?: number,\n  ): Promise<HttpResponse<T>> {\n    // Create abort controller for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const headers: Record<string, string> = {\n        'X-API-Key': this.apiKey,\n        'User-Agent': 'Huefy-SDK-JS/1.0.0',\n        'Accept': 'application/json',\n      };\n\n      // Add content type for POST requests\n      if (method === 'POST' && data) {\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const requestInit: RequestInit = {\n        method,\n        headers,\n        signal: controller.signal,\n      };\n      \n      if (method === 'POST' && data) {\n        requestInit.body = JSON.stringify(data);\n      }\n\n      const response = await fetch(url, requestInit);\n\n      clearTimeout(timeoutId);\n\n      // Parse response\n      let responseData: T;\n      try {\n        responseData = await response.json();\n      } catch (parseError) {\n        throw new HuefyError(\n          'Failed to parse response as JSON',\n          'INVALID_RESPONSE',\n          response.status,\n        );\n      }\n\n      // Handle error responses\n      if (!response.ok) {\n        const errorData = responseData as unknown as ErrorResponse;\n        throw createErrorFromResponse(errorData, response.status);\n      }\n\n      return {\n        data: responseData,\n        status: response.status,\n        statusText: response.statusText,\n        headers: this.extractHeaders(response.headers),\n      };\n    } catch (error: unknown) {\n      clearTimeout(timeoutId);\n\n      // Handle abort/timeout\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new TimeoutError(timeout || this.timeout);\n      }\n\n      // Handle network errors\n      if (error instanceof TypeError || (error instanceof Error && error.message.includes('fetch'))) {\n        const message = error instanceof Error ? error.message : 'Unknown network error';\n        throw new NetworkError(`Network error: ${message}`, error instanceof Error ? error : undefined);\n      }\n\n      // Re-throw HuefyErrors as-is\n      if (error instanceof HuefyError) {\n        throw error;\n      }\n\n      // Wrap other errors\n      throw new HuefyError(\n        `Unexpected error: ${error instanceof Error ? error.message : String(error)}`,\n        'UNEXPECTED_ERROR',\n      );\n    }\n  }\n\n  /**\n   * Extract headers from Response object to plain object\n   */\n  private extractHeaders(headers: Headers): Record<string, string> {\n    const result: Record<string, string> = {};\n    headers.forEach((value, key) => {\n      result[key] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get the base URL being used\n   */\n  getBaseUrl(): string {\n    return this.baseUrl;\n  }\n\n  /**\n   * Get the current timeout setting\n   */\n  getTimeout(): number {\n    return this.timeout;\n  }\n\n  /**\n   * Get the current retry configuration\n   */\n  getRetryConfig(): RetryConfig {\n    return { ...this.retryConfig };\n  }\n}","/**\n * Huefy Client\n * Main client class for the Huefy SDK\n */\n\nimport type {\n  HuefyConfig,\n  EmailData,\n  SendEmailOptions,\n  SendEmailRequest,\n  SendEmailResponse,\n  HealthResponse,\n  HuefyEventCallbacks,\n} from './types.js';\nimport { HttpClient } from './http.js';\nimport { HuefyError, ValidationError } from './errors.js';\n\n/**\n * Main Huefy SDK client for sending emails\n */\nexport class HuefyClient {\n  private readonly http: HttpClient;\n  private readonly callbacks?: HuefyEventCallbacks;\n\n  /**\n   * Create a new Huefy client\n   * \n   * @param config - Configuration options\n   * @param callbacks - Optional event callbacks for monitoring\n   * \n   * @example\n   * ```typescript\n   * const huefy = new HuefyClient({\n   *   apiKey: 'your-api-key'\n   * });\n   * \n   * // With custom configuration\n   * const huefy = new HuefyClient({\n   *   apiKey: 'your-api-key',\n   *   baseUrl: 'https://api.huefy.com/api/v1/sdk',\n   *   timeout: 30000,\n   *   retryAttempts: 3\n   * });\n   * ```\n   */\n  constructor(config: HuefyConfig, callbacks?: HuefyEventCallbacks) {\n    this.http = new HttpClient(config);\n    this.callbacks = callbacks;\n  }\n\n  /**\n   * Send an email using a template\n   * \n   * @param templateKey - The template identifier\n   * @param data - Template variables as key-value pairs\n   * @param recipient - The recipient's email address\n   * @param options - Optional sending configuration\n   * @returns Promise resolving to email send result\n   * \n   * @example\n   * ```typescript\n   * // Send with default SES provider\n   * const result = await huefy.sendEmail('welcome-email', {\n   *   name: 'John Doe',\n   *   company: 'Acme Corp'\n   * }, 'john@example.com');\n   * \n   * // Send with specific provider\n   * const result = await huefy.sendEmail('newsletter', {\n   *   name: 'Jane Smith',\n   *   unsubscribe_url: 'https://app.example.com/unsubscribe'\n   * }, 'jane@example.com', {\n   *   provider: 'sendgrid'\n   * });\n   * ```\n   */\n  async sendEmail(\n    templateKey: string,\n    data: EmailData,\n    recipient: string,\n    options?: SendEmailOptions,\n  ): Promise<SendEmailResponse> {\n    // Validate input parameters\n    this.validateSendEmailInput(templateKey, data, recipient);\n\n    // Build request payload\n    const request: SendEmailRequest = {\n      templateKey: templateKey,\n      data,\n      recipient,\n      ...(options?.provider && { providerType: options.provider }),\n    };\n\n    try {\n      // Trigger onSendStart callback\n      this.callbacks?.onSendStart?.(request);\n\n      // Make the API request\n      const response = await this.http.post<SendEmailResponse>('/emails/send', request);\n\n      // Trigger onSendSuccess callback\n      this.callbacks?.onSendSuccess?.(response.data);\n\n      return response.data;\n    } catch (error) {\n      // Convert to HuefyError if needed and trigger callback\n      const huefyError = error instanceof HuefyError ? error : new HuefyError(\n        error instanceof Error ? error.message : String(error),\n        'UNEXPECTED_ERROR',\n      );\n\n      this.callbacks?.onSendError?.(huefyError);\n      throw huefyError;\n    }\n  }\n\n  /**\n   * Send multiple emails with different template data\n   * \n   * @param emails - Array of email sending requests\n   * @returns Promise resolving to array of results\n   * \n   * @example\n   * ```typescript\n   * const results = await huefy.sendBulkEmails([\n   *   {\n   *     templateKey: 'welcome-email',\n   *     data: { name: 'John Doe' },\n   *     recipient: 'john@example.com'\n   *   },\n   *   {\n   *     templateKey: 'welcome-email', \n   *     data: { name: 'Jane Smith' },\n   *     recipient: 'jane@example.com',\n   *     options: { provider: 'sendgrid' }\n   *   }\n   * ]);\n   * ```\n   */\n  async sendBulkEmails(\n    emails: Array<{\n      templateKey: string;\n      data: EmailData;\n      recipient: string;\n      options?: SendEmailOptions;\n    }>,\n  ): Promise<Array<{\n    email: string;\n    success: boolean;\n    result?: SendEmailResponse;\n    error?: HuefyError;\n  }>> {\n    if (!Array.isArray(emails) || emails.length === 0) {\n      throw new ValidationError('Emails array is required and must not be empty');\n    }\n\n    if (emails.length > 100) {\n      throw new ValidationError('Maximum 100 emails allowed per bulk request');\n    }\n\n    // Process emails concurrently with a reasonable limit\n    const results = await Promise.allSettled(\n      emails.map(async (email) => {\n        try {\n          const result = await this.sendEmail(\n            email.templateKey,\n            email.data,\n            email.recipient,\n            email.options,\n          );\n          return {\n            email: email.recipient,\n            success: true as const,\n            result,\n          };\n        } catch (error) {\n          return {\n            email: email.recipient,\n            success: false as const,\n            error: error instanceof HuefyError ? error : new HuefyError(\n              error instanceof Error ? error.message : String(error),\n              'UNEXPECTED_ERROR',\n            ),\n          };\n        }\n      }),\n    );\n\n    return results.map((result) =>\n      result.status === 'fulfilled' ? result.value : result.reason,\n    );\n  }\n\n  /**\n   * Check the health of the Huefy API\n   * \n   * @returns Promise resolving to health status\n   * \n   * @example\n   * ```typescript\n   * const health = await huefy.healthCheck();\n   * console.log('API Status:', health.status);\n   * ```\n   */\n  async healthCheck(): Promise<HealthResponse> {\n    const response = await this.http.get<HealthResponse>('/health');\n    return response.data;\n  }\n\n  /**\n   * Validate a template by attempting to render it with test data\n   * \n   * @param templateKey - The template identifier\n   * @param testData - Test data for validation\n   * @returns Promise resolving to validation result\n   * \n   * @example\n   * ```typescript\n   * const isValid = await huefy.validateTemplate('welcome-email', {\n   *   name: 'Test User',\n   *   company: 'Test Company'\n   * });\n   * ```\n   */\n  async validateTemplate(templateKey: string, testData: EmailData): Promise<boolean> {\n    try {\n      // Use a test recipient that won't actually send\n      await this.sendEmail(templateKey, testData, 'test@huefy.com');\n      return true;\n    } catch (error) {\n      if (error instanceof HuefyError) {\n        // Template validation errors vs actual sending errors\n        return !['TEMPLATE_NOT_FOUND', 'INVALID_TEMPLATE_DATA'].includes(error.code);\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Get client configuration information\n   * \n   * @returns Client configuration details\n   */\n  getConfig(): {\n    baseUrl: string;\n    timeout: number;\n    retryConfig: any;\n  } {\n    return {\n      baseUrl: this.http.getBaseUrl(),\n      timeout: this.http.getTimeout(),\n      retryConfig: this.http.getRetryConfig(),\n    };\n  }\n\n  /**\n   * Validate input parameters for sendEmail\n   */\n  private validateSendEmailInput(\n    templateKey: string,\n    data: EmailData,\n    recipient: string,\n  ): void {\n    if (!templateKey || typeof templateKey !== 'string') {\n      throw new ValidationError('Template key is required and must be a string');\n    }\n\n    if (templateKey.trim().length === 0) {\n      throw new ValidationError('Template key cannot be empty');\n    }\n\n    if (templateKey.length > 100) {\n      throw new ValidationError('Template key cannot exceed 100 characters');\n    }\n\n    if (!data || typeof data !== 'object') {\n      throw new ValidationError('Data is required and must be an object');\n    }\n\n    if (Array.isArray(data)) {\n      throw new ValidationError('Data must be an object, not an array');\n    }\n\n    // Validate that all data values are strings\n    for (const [key, value] of Object.entries(data)) {\n      if (typeof value !== 'string') {\n        throw new ValidationError(\n          `Data value for key '${key}' must be a string, got ${typeof value}`,\n        );\n      }\n    }\n\n    if (!recipient || typeof recipient !== 'string') {\n      throw new ValidationError('Recipient is required and must be a string');\n    }\n\n    if (!this.isValidEmail(recipient)) {\n      throw new ValidationError(`Invalid email address: ${recipient}`);\n    }\n\n    if (recipient.length > 254) {\n      throw new ValidationError('Email address cannot exceed 254 characters');\n    }\n  }\n\n  /**\n   * Simple email validation\n   */\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n}","/**\n * Huefy SDK Types\n * TypeScript type definitions for the Huefy email sending API\n */\n\n/**\n * Supported email providers\n */\nexport type EmailProvider = 'ses' | 'sendgrid' | 'mailgun' | 'mailchimp';\n\n/**\n * Configuration for the Huefy client\n */\nexport interface HuefyConfig {\n  /** Your Huefy API key */\n  apiKey: string;\n  /** Base URL for the API (optional) */\n  baseUrl?: string;\n  /** Request timeout in milliseconds (default: 30000) */\n  timeout?: number;\n  /** Number of retry attempts (default: 3) */\n  retryAttempts?: number;\n  /** Delay between retries in milliseconds (default: 1000) */\n  retryDelay?: number;\n}\n\n/**\n * Template data for email variables\n */\nexport interface EmailData {\n  [key: string]: string;\n}\n\n/**\n * Options for sending an email\n */\nexport interface SendEmailOptions {\n  /** Email provider to use (optional, defaults to 'ses') */\n  provider?: EmailProvider;\n}\n\n/**\n * Request payload for sending an email\n */\nexport interface SendEmailRequest {\n  /** The template key/identifier */\n  templateKey: string;\n  /** Template variables */\n  data: EmailData;\n  /** Recipient email address */\n  recipient: string;\n  /** Email provider (optional, defaults to 'ses') */\n  providerType?: EmailProvider;\n}\n\n/**\n * Response from sending an email\n */\nexport interface SendEmailResponse {\n  /** Whether the email was sent successfully */\n  success: boolean;\n  /** Human-readable status message */\n  message: string;\n  /** Unique identifier for the sent email */\n  messageId: string;\n  /** The provider that was used to send the email */\n  provider: EmailProvider;\n}\n\n/**\n * Validation error details\n */\nexport interface ValidationError {\n  /** The field that failed validation */\n  field: string;\n  /** Validation error message */\n  message: string;\n  /** Validation error code */\n  code?: string;\n}\n\n/**\n * API error response\n */\nexport interface ErrorResponse {\n  /** Human-readable error message */\n  error: string;\n  /** Machine-readable error code */\n  code: string;\n  /** Additional error details */\n  details?: {\n    [key: string]: any;\n    templateKey?: string;\n    missingVariables?: string[];\n    validationErrors?: ValidationError[];\n  };\n}\n\n/**\n * Error codes returned by the API\n */\nexport enum ErrorCode {\n  INVALID_API_KEY = 'INVALID_API_KEY',\n  TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND',\n  INVALID_TEMPLATE_DATA = 'INVALID_TEMPLATE_DATA',\n  INVALID_RECIPIENT = 'INVALID_RECIPIENT',\n  PROVIDER_ERROR = 'PROVIDER_ERROR',\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n}\n\n/**\n * Health check response\n */\nexport interface HealthResponse {\n  /** Service status */\n  status: string;\n  /** Timestamp of the health check */\n  timestamp: string;\n  /** API version */\n  version: string;\n}\n\n/**\n * SDK result type for successful operations\n */\nexport interface HuefyResult<T = SendEmailResponse> {\n  /** The result data */\n  data: T;\n  /** Whether the operation was successful */\n  success: true;\n}\n\n/**\n * SDK error type for failed operations\n */\nexport interface HuefyError {\n  /** Error message */\n  message: string;\n  /** Error code */\n  code: string;\n  /** HTTP status code */\n  statusCode?: number;\n  /** Additional error details */\n  details?: any;\n  /** Whether the operation was successful */\n  success: false;\n}\n\n/**\n * Unified result type that can be either success or error\n */\nexport type HuefyResponse<T = SendEmailResponse> = HuefyResult<T> | HuefyError;\n\n/**\n * Retry configuration\n */\nexport interface RetryConfig {\n  /** Maximum number of retry attempts */\n  maxAttempts: number;\n  /** Initial delay between retries in milliseconds */\n  initialDelay: number;\n  /** Multiplier for exponential backoff */\n  backoffMultiplier: number;\n  /** Maximum delay between retries in milliseconds */\n  maxDelay: number;\n  /** HTTP status codes that should trigger a retry */\n  retryableStatusCodes: number[];\n}\n\n/**\n * Internal HTTP response type\n */\nexport interface HttpResponse<T = any> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n}\n\n/**\n * Event callback types for monitoring\n */\nexport interface HuefyEventCallbacks {\n  /** Called when an email send attempt starts */\n  onSendStart?: (request: SendEmailRequest) => void;\n  /** Called when an email is sent successfully */\n  onSendSuccess?: (response: SendEmailResponse) => void;\n  /** Called when an email send fails */\n  onSendError?: (error: HuefyError) => void;\n  /** Called before a retry attempt */\n  onRetry?: (attempt: number, error: HuefyError) => void;\n}","/**\n * Huefy SDK for JavaScript/TypeScript\n * \n * @packageDocumentation\n */\n\n// Export main client\nexport { HuefyClient } from './client.js';\n\n// Export HTTP client (for advanced use cases)\nexport { HttpClient } from './http.js';\n\n// Export all types\nexport type {\n  HuefyConfig,\n  EmailProvider,\n  EmailData,\n  SendEmailOptions,\n  SendEmailRequest,\n  SendEmailResponse,\n  ErrorResponse,\n  HealthResponse,\n  HuefyResult,\n  HuefyError as HuefyErrorType,\n  HuefyResponse,\n  RetryConfig,\n  HttpResponse,\n  HuefyEventCallbacks,\n} from './types.js';\n\n// Export error classes\nexport {\n  HuefyError,\n  AuthenticationError,\n  TemplateNotFoundError,\n  InvalidTemplateDataError,\n  InvalidRecipientError,\n  ProviderError,\n  RateLimitError,\n  NetworkError,\n  TimeoutError,\n  ValidationError,\n  createErrorFromResponse,\n  isHuefyError,\n  isErrorCode,\n  isRetryableError,\n} from './errors.js';\n\n// Export error codes enum\nexport { ErrorCode } from './types.js';\n\n// Default export for convenience\nimport { HuefyClient } from './client.js';\nexport default HuefyClient;\n\n/**\n * Create a new Huefy client instance\n * \n * @param config - Configuration options\n * @returns Configured Huefy client\n * \n * @example\n * ```typescript\n * import { createClient } from '@teracrafts/huefy';\n * \n * const huefy = createClient({\n *   apiKey: 'your-api-key'\n * });\n * \n * await huefy.sendEmail('welcome-email', {\n *   name: 'John Doe'\n * }, 'john@example.com');\n * ```\n */\nexport function createClient(config: import('./types.js').HuefyConfig): HuefyClient {\n  return new HuefyClient(config);\n}\n\n/**\n * Package version\n */\nexport const VERSION = '1.0.0-beta.9';\n\n/**\n * Package information\n */\nexport const SDK_INFO = {\n  name: '@teracrafts/huefy',\n  version: VERSION,\n  language: 'JavaScript/TypeScript',\n  repository: 'https://github.com/teracrafts/huefy-sdk',\n  documentation: 'https://docs.huefy.com/sdk/javascript',\n} as const;"]}